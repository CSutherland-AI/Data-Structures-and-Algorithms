"""
You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.
"""


def maxArea(self, height: List[int]) -> int:
        
        #base=index difference
        #height= height of smaller column
        
        #How can I use logic to not have to check every single case?
        
        l,r=0,len(height)-1
        
        maxarea=0
        while l<r:
            area= min(height[l],height[r])*(r-l)
            maxarea=max(area,maxarea)
            
            if height[l]>height[r]:
                r-=1
                
            elif height[l]<height[r]:
                l+=1
            else:
                l+=1
                
        return maxarea       
                
